using NUnit.Framework;
using Tiveria.Common.Logging;
using System;
using System.Threading;
using System.Threading.Tasks;

namespace Toolsfactory.Protocols.D0.Tests
{
    public class VendorMessageParserTests
    {
        static byte[] request = { 0x2F, 0x3F, 0x21, 0x0D, 0x0A };
        static byte[] ack = { 0x06, 0x30, 0x30, 0x30, 0x0D, 0x0A };
        static byte[] vendoridentification = { 0x2f, 0x4c, 0x4f, 0x47, 0x34, 0x4c, 0x4b, 0x31, 0x33, 0x42, 0x44, 0x32, 0x30, 0x32, 0x30, 0x31, 0x35, 0x0d, 0x0a };
        static byte[] obis = { 0x02, 0x43, 0x2e, 0x31, 0x2e, 0x30, 0x28, 0x30, 0x36, 0x31, 0x39, 0x34, 0x37, 0x34, 0x38, 0x29, 0x0d, 0x0a, 0x30, 0x2e, 0x30, 0x2e, 0x30, 0x28, 0x30, 0x30, 0x31, 0x4c, 0x4f, 0x47, 0x30, 0x30, 0x30, 0x36, 0x31, 0x39, 0x34, 0x37, 0x34, 0x38, 0x29, 0x0d, 0x0a, 0x46, 0x2e, 0x46, 0x28, 0x30, 0x30, 0x30, 0x30, 0x29, 0x0d, 0x0a, 0x31, 0x2e, 0x38, 0x2e, 0x30, 0x28, 0x30, 0x31, 0x33, 0x34, 0x35, 0x31, 0x2e, 0x31, 0x35, 0x39, 0x2a, 0x6b, 0x57, 0x68, 0x29, 0x0d, 0x0a, 0x43, 0x2e, 0x37, 0x2e, 0x31, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x29, 0x0d, 0x0a, 0x43, 0x2e, 0x37, 0x2e, 0x32, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x29, 0x0d, 0x0a, 0x43, 0x2e, 0x37, 0x2e, 0x33, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x29, 0x0d, 0x0a, 0x30, 0x2e, 0x32, 0x2e, 0x31, 0x28, 0x76, 0x65, 0x72, 0x2e, 0x30, 0x32, 0x2c, 0x20, 0x31, 0x35, 0x30, 0x32, 0x32, 0x38, 0x2c, 0x20, 0x36, 0x37, 0x31, 0x41, 0x29, 0x0d, 0x0a, 0x43, 0x2e, 0x32, 0x2e, 0x31, 0x28, 0x31, 0x36, 0x30, 0x36, 0x32, 0x38, 0x31, 0x30, 0x34, 0x31, 0x29, 0x0d, 0x0a, 0x43, 0x2e, 0x32, 0x2e, 0x39, 0x28, 0x31, 0x36, 0x30, 0x36, 0x32, 0x38, 0x31, 0x30, 0x34, 0x31, 0x29, 0x0d, 0x0a, 0x21, 0x0d, 0x0a, 0x03 };

        private static ILogManager _logManager = new DummyLogManager();
        private static CancellationToken _token = new CancellationToken();
        private D0DataReaderDummy _dataReader;
        private IdentificationMessageParser _parser;

        [SetUp]
        public void Setup()
        {
            _dataReader = new D0DataReaderDummy();
            _parser = new IdentificationMessageParser(_logManager);
        }

        [Test]
        public void Test1()
        {
            // message is "/LOG4LK13BD202015" 
            // Vendor: LOG
            // ReactionTime Indicator: Last Vendor Letter is BIG => 200ms
            // Baudrate: 4 (4800)
            // Indetification: LK13BD202015 (Length:12 chars)
            byte[] message = { 0x2f, 0x4c, 0x4f, 0x47, 0x34, 0x4c, 0x4b, 0x31, 0x33, 0x42, 0x44, 0x32, 0x30, 0x32, 0x30, 0x31, 0x35, 0x0d, 0x0a };
            _dataReader.SetDummyData(message);

            var ok = _parser.Parse(message);

            Assert.IsTrue(ok);
            Assert.AreEqual("LOG", _parser.Vendor);
            Assert.AreEqual('4', _parser.BaudrateCharacter);
            Assert.AreEqual("LK13BD202015", _parser.Identification);
            Assert.Pass();
        }
    }

}
